#!/usr/bin/python
#
# Copyright (c) 2016 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Run from SmokePing as a "pipe" alert target. Sends an MTR for the target to the designated e-mail address.
Michael Fincham <michael.fincham@catalyst.net.nz>.
"""

import argparse
import datetime
import pipes
import socket
import subprocess
import sys

from email.mime.text import MIMEText
from slacker import Slacker


def collect_mtr(hostname, count=5):
    mtr_command = "mtr -i0.5 --show-ips -w -c %s %s" % (count, pipes.quote(hostname))
    try:
        mtr_output = subprocess.check_output(mtr_command.split()).strip()
        return {'cmd': mtr_command, 'output': mtr_output}
    except:
        sys.stderr.write('error running MTR.\n')
        sys.exit(1)


def send_email(args):

    template = """Packet loss report from {name} for {target} at {timestamp}.

{mtr_command}

{mtr_output}

Alert triggered: {alert}
Target: {target}
Target hostname: {hostname}
Loss pattern: {loss_pattern}
RTT: {rtt}"""

    mtr = collect_mtr(args.hostname)
    message = MIMEText(template.format(
        target=args.target,
        timestamp=datetime.datetime.now().strftime('%c'),
        mtr_command=mtr['cmd'],
        mtr_output=mtr['output'],
        alert=args.alert,
        hostname=args.hostname,
        loss_pattern=" ".join(args.loss_pattern.split()[1:]),
        rtt=" ".join(args.rtt.split()[1:]),
        name=args.name,
    ))

    message["From"] = "smokeping-mtr-alert@%s" % hostname
    message["To"] = args.email
    message["Subject"] = "{name} SmokePing alert: {target}".format(name=args.name, target=args.target)

    try:
        p = subprocess.Popen(["/usr/sbin/sendmail", "-t", "-oi"], stdin=subprocess.PIPE)
        p.communicate(message.as_string())
    except:
        sys.stderr.write('error running sendmail.\n')
        sys.exit(1)


def send_slack(args):
    template = """Packet loss report from `{name}` for `{target}` at {timestamp}.

`{mtr_command}`

```{mtr_output}```

Alert triggered: {alert}
Loss pattern: {loss_pattern}
RTT: {rtt}"""
    mtr = collect_mtr(args.hostname)
    message = template.format(
        target=args.target,
        timestamp=datetime.datetime.now().strftime('%c'),
        mtr_command=mtr['cmd'],
        mtr_output=mtr['output'],
        alert=args.alert,
        hostname=args.hostname,
        loss_pattern=" ".join(args.loss_pattern.split()[1:]),
        rtt=" ".join(args.rtt.split()[1:]),
        name=args.name,
    )
    slack = Slacker(args.slack_token)
    slack.chat.post_message(args.slack_channel, message)


if __name__ == "__main__":

    hostname = socket.gethostname()

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('alert', help='name of the alert, supplied by smokeping')
    parser.add_argument('target', help='target being monitored, supplied by smokeping')
    parser.add_argument('loss_pattern', help='loss pattern that has triggered, supplied by smokeping')
    parser.add_argument('rtt', help='current RTT for target, supplied by smokeping')
    parser.add_argument('hostname', help='hostname of target, supplied by smokeping')
    parser.add_argument('edgetrigger', help='edgetrigger status, supplied by smokeping', default=1, type=int, nargs='?')
    parser.add_argument('--notify', default='email', help='method to notify (slack or email)')
    parser.add_argument('--email', default='root', help='e-mail address to send report, defaults to root')
    parser.add_argument('--slack-token', default=None, help='Slack token to use for webhook')
    parser.add_argument('--slack-channel', default=None, help='Slack channel to use for notify')
    parser.add_argument('--name', default=hostname, help='name of smokeping installation, defaults to hostname where the script runs')
    parser.add_argument('--force', dest='force', action='store_true', help='force send the notification even if smokeping reports the edgetrigger was not raised')
    parser.set_defaults(force=False)
    args = parser.parse_args()

    if not args.force and args.edgetrigger != 1:
        sys.exit(2)

    if args.notify == 'email':
        send_email(args)
    elif args.notify == 'slack':
        send_slack(args)
